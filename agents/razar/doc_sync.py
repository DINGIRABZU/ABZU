from __future__ import annotations

__version__ = "0.2.2"

"""Synchronize key documentation after component changes.

This helper refreshes the primary RAZAR documentation artefacts:

* ``docs/Ignition.md`` – regenerated from ``docs/system_blueprint.md``.
* ``docs/system_blueprint.md`` – status and boot order overlays.
* Component docs such as ``docs/component_index.md`` generated by
  ``scripts/component_inventory.py``.

Call :func:`sync_docs` after any successful repair or scaffold so operators can
rely on up‑to‑date references. Run manually with ``python -m agents.razar.doc_sync``.
"""

from pathlib import Path
import subprocess

from razar import doc_sync as _core_sync

ROOT = Path(__file__).resolve().parents[2]


def _update_component_docs() -> None:
    """Regenerate component index and status tables."""

    script = ROOT / "scripts" / "component_inventory.py"
    if script.exists():
        subprocess.run(["python", str(script)], check=False)


def sync_docs() -> None:
    """Refresh ignition, blueprint and component documentation."""

    _core_sync.sync_docs()
    _update_component_docs()


def main() -> None:  # pragma: no cover - CLI wrapper
    """CLI entry point for manual execution."""

    sync_docs()


if __name__ == "__main__":  # pragma: no cover - module CLI
    main()
