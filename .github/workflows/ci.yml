name: CI

on:
  pull_request:

jobs:
  change-justification:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Validate change justification
        run: python scripts/validate_change_justification.py
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
      - name: Verify pre-commit version
        run: |
          expected=$(grep -Po '(?<=pre-commit==)[0-9.]+(?=")' pyproject.toml)
          installed=$(pre-commit --version | awk '{print $NF}')
          if [ "$installed" != "$expected" ]; then
            echo "pre-commit $expected required, found $installed"
            exit 1
          fi
      - name: Run pre-commit on touched files
        run: |
          files=$(git diff --name-only origin/$GITHUB_BASE_REF...HEAD)
          if [ -n "$files" ]; then
            pre-commit run --files $files
          fi
      - name: Verify component maturity
        run: python scripts/verify_component_maturity.py

  bandit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
      - name: Run bandit security scan
        run: pre-commit run bandit --all-files

  registry-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema
      - name: Validate component index json
        run: python scripts/check_component_index_json.py
      - name: Validate connector index
        run: python scripts/check_connector_index.py
      - name: Validate dependency registry
        run: python scripts/check_dependency_registry.py

  crate-refs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Verify crate references
        run: python scripts/verify_crate_refs.py

  blueprint-refs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Verify system blueprint references
        run: python scripts/verify_blueprint_refs.py

  validate-components:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Validate component versions
        run: python scripts/validate_components.py

  tracing-extras:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install tracing extras
        run: |
          python -m pip install --upgrade pip
          pip install ".[tracing]"

  build-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install doc tooling
        run: |
          python -m pip install --upgrade pip
          pip install openapi-spec-validator jsonschema
      - name: Verify documentation freshness
        run: docs/build_docs.sh

  pytest:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: src
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            requirements.txt
            dev-requirements.txt
      - name: Cache model downloads
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/huggingface
            INANNA_AI/models
          key: ${{ runner.os }}-models-${{ hashFiles('download_models.py') }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r dev-requirements.txt
          pip install -e .
          pip install jsonschema
      - name: Verify required pytest plugins
        run: python - <<'PY'
import importlib, sys
sys.exit(0 if importlib.util.find_spec('pytest_cov') else 1)
PY
      - name: Scan for placeholder markers
        run: |
          python scripts/check_placeholders.py $(git ls-files)
      - name: Run tests with coverage
        run: pytest --cov
      - name: Export coverage metrics
        if: always()
        run: python scripts/export_coverage.py
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: htmlcov
      - name: Upload pytest metrics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-metrics
          path: monitoring/pytest_metrics.prom
      - name: Build component index
        run: python scripts/build_component_index.py
      - name: Ensure component statuses present
        run: |
          python - <<'PY'
import json, sys
data = json.load(open('component_index.json'))
missing = [c['id'] for c in data.get('components', []) if not c.get('status')]
if missing:
    print('Missing status for components:', ', '.join(missing))
    sys.exit(1)
PY
      - name: Archive component index
        run: |
          mkdir -p data/archives
          cp component_index.json "data/archives/component_index_${GITHUB_SHA}.json"
      - name: Verify folder layout
        run: |
          if git status --short | grep '^??' | grep -v '^?? data/archives/'; then
            echo "Stray files detected outside expected directories"
            exit 1
          fi
      - name: Upload component index artifact
        uses: actions/upload-artifact@v4
        with:
          name: component-index
          path: data/archives/component_index_${GITHUB_SHA}.json
      - name: Validate component index schema
        run: jsonschema -i component_index.json schemas/component_index.schema.json
      - name: Verify component inventory
        run: python scripts/component_inventory.py

  ci:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: src
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure docs updated
        run: |
          git fetch origin $GITHUB_BASE_REF --depth=1
          CODE_CHANGED=$(git diff --name-only origin/$GITHUB_BASE_REF...HEAD | grep -E '\.py$' | grep -v '^tests/' || true)
          DOCS_CHANGED=$(git diff --name-only origin/$GITHUB_BASE_REF...HEAD | grep -E '^docs/.*\.md$' || true)
          if [ -n "$CODE_CHANGED" ] && [ -z "$DOCS_CHANGED" ]; then
            echo "Modules were modified without corresponding documentation updates:"
            echo "$CODE_CHANGED"
            exit 1
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            requirements.txt
            dev-requirements.txt

      - name: Ensure blueprint synchronized
        run: git diff --name-only origin/$GITHUB_BASE_REF...HEAD | xargs python scripts/ensure_blueprint_sync.py

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r dev-requirements.txt
          pip install -e .
          pip install mypy

      - name: Verify docs index
        run: |
          python tools/doc_indexer.py
          git diff --exit-code docs/INDEX.md

      - name: Verify code index
        run: |
          python scripts/build_index.py
          git diff --exit-code docs/code_index.md

      - name: Validate markdown links
        run: git ls-files '*.md' | xargs python scripts/validate_links.py

      - name: Validate docs cross-links
        run: python scripts/validate_docs.py

      - name: Mypy
        run: mypy memory/ tests/

      - name: Validate templates and schemas
        run: python scripts/validate_configs.py

      - name: Verify component maturity
        run: python scripts/verify_component_maturity.py

      - name: Check connectors
        run: python scripts/check_connectors.py

      - name: Profiling
        run: python -m cProfile -m task_profiling

      - name: Health scan
        run: |
          set -o pipefail
          python start_spiral_os.py --dry-run 2>&1 | tee health.log
          if grep -E "ERROR|MISSING" health.log; then
            exit 1
          fi

      - name: Failure guidance
        if: failure()
        run: |
          echo "CI checks failed. See the onboarding and architecture guides for help:" \
          && echo "https://github.com/$GITHUB_REPOSITORY/blob/$GITHUB_BASE_REF/docs/developer_onboarding.md" \
          && echo "https://github.com/$GITHUB_REPOSITORY/blob/$GITHUB_BASE_REF/docs/architecture.md"

  server-smoke:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: .:src
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi==0.116.1 httpx==0.28.1 numpy==2.2.6 scipy==1.16.1 pytest==8.4.1 pytest-cov==5.0.0 \
            openapi-spec-validator==0.6.1 jsonschema==4.23.0

      - name: Run server smoke tests
        run: pytest --noconftest --override-ini="addopts=" tests/test_server.py

      - name: Validate API schemas
        run: python scripts/validate_api_schemas.py

  rust-python-integration:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: src
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Build Rust workspace
        run: cargo build --manifest-path NEOABZU/Cargo.toml --workspace --lib
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run integration tests
        run: pytest tests/integration
