name: CI

on:
  pull_request:

jobs:
  change-justification:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Validate change justification
        run: python scripts/validate_change_justification.py
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
      - name: Verify pre-commit version
        run: |
          expected=$(grep -Po '(?<=pre-commit==)[0-9.]+(?=")' pyproject.toml)
          installed=$(pre-commit --version | awk '{print $NF}')
          if [ "$installed" != "$expected" ]; then
            echo "pre-commit $expected required, found $installed"
            exit 1
          fi
      - name: Run pre-commit
        run: pre-commit run --all-files

  bandit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit
      - name: Run bandit security scan
        run: bandit -r . -x tests,docs --severity-level high --confidence-level high

  pytest:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: src
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            requirements.txt
            dev-requirements.txt
      - name: Cache model downloads
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/huggingface
            INANNA_AI/models
          key: ${{ runner.os }}-models-${{ hashFiles('download_models.py') }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r dev-requirements.txt
          pip install -e .
          pip install jsonschema
      - name: Verify required pytest plugins
        run: python - <<'PY'
import importlib, sys
sys.exit(0 if importlib.util.find_spec('pytest_cov') else 1)
PY
      - name: Run tests
        run: pytest --cov
      - name: Export coverage metrics
        run: python scripts/export_coverage.py
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: htmlcov
      - name: Upload pytest metrics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-metrics
          path: monitoring/pytest_metrics.prom
      - name: Validate component index schema
        run: jsonschema -i component_index.json schemas/component_index.schema.json

  ci:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: src
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure docs updated
        run: |
          git fetch origin $GITHUB_BASE_REF --depth=1
          CODE_CHANGED=$(git diff --name-only origin/$GITHUB_BASE_REF...HEAD | grep -E '\.py$' | grep -v '^tests/' || true)
          DOCS_CHANGED=$(git diff --name-only origin/$GITHUB_BASE_REF...HEAD | grep -E '^docs/.*\.md$' || true)
          if [ -n "$CODE_CHANGED" ] && [ -z "$DOCS_CHANGED" ]; then
            echo "Modules were modified without corresponding documentation updates:"
            echo "$CODE_CHANGED"
            exit 1
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            requirements.txt
            dev-requirements.txt

      - name: Ensure blueprint synchronized
        run: git diff --name-only origin/$GITHUB_BASE_REF...HEAD | xargs python scripts/ensure_blueprint_sync.py

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r dev-requirements.txt
          pip install -e .
          pip install mypy

      - name: Verify docs index
        run: |
          python tools/doc_indexer.py
          git diff --exit-code docs/INDEX.md

      - name: Mypy
        run: mypy

      - name: Validate templates and schemas
        run: python scripts/validate_configs.py

      - name: Profiling
        run: python -m cProfile -m task_profiling

      - name: Health scan
        run: |
          set -o pipefail
          python start_spiral_os.py --dry-run 2>&1 | tee health.log
          if grep -E "ERROR|MISSING" health.log; then
            exit 1
          fi

      - name: Failure guidance
        if: failure()
        run: |
          echo "CI checks failed. See the onboarding and architecture guides for help:" \
          && echo "https://github.com/$GITHUB_REPOSITORY/blob/$GITHUB_BASE_REF/docs/developer_onboarding.md" \
          && echo "https://github.com/$GITHUB_REPOSITORY/blob/$GITHUB_BASE_REF/docs/architecture.md"

  server-smoke:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: .:src
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi==0.116.1 httpx==0.28.1 numpy==2.2.6 scipy==1.16.1 pytest==8.4.1 pytest-cov==5.0.0 \
            openapi-spec-validator==0.6.1 jsonschema==4.23.0

      - name: Run server smoke tests
        run: pytest --noconftest --override-ini="addopts=" tests/test_server.py

      - name: Validate API schemas
        run: python scripts/validate_api_schemas.py
