name: CI

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - 'v*'

# Reusable anchors keep the workflow maintainable
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - &checkout
        name: Checkout repository
        uses: actions/checkout@v4

      - &setup-python
        name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip  # Cache dependencies for speed
          cache-dependency-path: |
            pyproject.toml
            requirements.txt
            dev-requirements.txt

      - &install-deps
        name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev] --no-deps
          pip install ruff black mypy bandit semgrep pytest

      - name: Ruff
        run: ruff .

      - name: Black
        run: black --check .

      - name: Mypy
        run: mypy .  # Static type checking

      - name: Bandit
        run: bandit -r . -x tests --severity-level high --confidence-level high

      - name: Semgrep
        run: semgrep --config auto --severity=ERROR --error

      - name: Profiling
        run: python -m cProfile -m task_profiling

      - name: Dependency check
        run: |
          python scripts/dependency_check.py | tee dependency_check.log
          if grep -F '‚ùå' dependency_check.log; then
            echo 'Detected failing components'
            exit 1
          fi

  tests:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - *checkout
      - *setup-python
      - *install-deps
      - name: Coverage
        run: |
          coverage run -m pytest
          coverage html
          coverage report --fail-under=85
      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov
      - name: Component inventory
        run: python scripts/component_inventory.py
      - name: Quality score
        env:
          CI_ARTIFACTS_DIR: ci_artifacts
        run: python scripts/quality_score.py
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: |
            docs/component_status.md
            docs/component_index.md
            docs/component_status.json
            CHANGELOG*.md
      - name: Gate release on quality threshold
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          python - <<'PY'
          import json, sys
          data = json.load(open('data/quality_history.json'))[-1]['results']
          threshold = 7
          bad = [n for n, m in data.items() if m['overall'] < threshold]
          if bad:
            print('Components below threshold:', ', '.join(bad))
            sys.exit(1)
          PY
